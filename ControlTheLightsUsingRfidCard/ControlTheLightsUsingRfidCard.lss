
ControlTheLightsUsingRfidCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fe0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000fe0  00001074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013f  0080006e  0080006e  00001082  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000258  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf4  00000000  00000000  0000131a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d0  00000000  00000000  00001f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cab  00000000  00000000  000023de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  0000308c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000077a  00000000  00000000  000036ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d5 02 	call	0x5aa	; 0x5aa <main>
  8a:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <serial_init>:
volatile int8_t UQEnd;


void serial_init(uint16_t baudrate)
{
uint16_t ubrrvalue = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
  92:	9c 01       	movw	r18, r24
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	ca 01       	movw	r24, r20
  9a:	b9 01       	movw	r22, r18
  9c:	60 58       	subi	r22, 0x80	; 128
  9e:	7b 47       	sbci	r23, 0x7B	; 123
  a0:	81 4e       	sbci	r24, 0xE1	; 225
  a2:	9f 4f       	sbci	r25, 0xFF	; 255
  a4:	f3 e0       	ldi	r31, 0x03	; 3
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	88 1f       	adc	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	fa 95       	dec	r31
  b0:	d1 f7       	brne	.-12     	; 0xa6 <serial_init+0x14>
  b2:	e4 e0       	ldi	r30, 0x04	; 4
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	44 1f       	adc	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	ea 95       	dec	r30
  be:	d1 f7       	brne	.-12     	; 0xb4 <serial_init+0x22>
  c0:	0e 94 8c 05 	call	0xb18	; 0xb18 <__udivmodsi4>
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
	
	
	
	UQFront=UQEnd=-1;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	80 93 7e 00 	sts	0x007E, r24
  ce:	80 91 7e 00 	lds	r24, 0x007E
  d2:	80 93 7d 00 	sts	0x007D, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
  d6:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
  d8:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  da:	86 e8       	ldi	r24, 0x86	; 134
  dc:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  de:	88 e9       	ldi	r24, 0x98	; 152
  e0:	8a b9       	out	0x0a, r24	; 10
	sei();
  e2:	78 94       	sei

}
  e4:	08 95       	ret

000000e6 <serial_finit>:

void serial_finit(uint16_t baudrate,uint8_t xtal)
{
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	26 2f       	mov	r18, r22
uint16_t ubrrvalue = (((xtal*1000000)+(baudrate*8L))/(baudrate*16L)-1);
  f0:	7c 01       	movw	r14, r24
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	ca 01       	movw	r24, r20
  fe:	b9 01       	movw	r22, r18
 100:	28 e4       	ldi	r18, 0x48	; 72
 102:	38 ee       	ldi	r19, 0xE8	; 232
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	0e 94 6d 05 	call	0xada	; 0xada <__mulsi3>
 10c:	6e 0d       	add	r22, r14
 10e:	7f 1d       	adc	r23, r15
 110:	80 1f       	adc	r24, r16
 112:	91 1f       	adc	r25, r17
 114:	b3 e0       	ldi	r27, 0x03	; 3
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	88 1f       	adc	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	ba 95       	dec	r27
 120:	d1 f7       	brne	.-12     	; 0x116 <serial_finit+0x30>
 122:	a4 e0       	ldi	r26, 0x04	; 4
 124:	ee 0c       	add	r14, r14
 126:	ff 1c       	adc	r15, r15
 128:	00 1f       	adc	r16, r16
 12a:	11 1f       	adc	r17, r17
 12c:	aa 95       	dec	r26
 12e:	d1 f7       	brne	.-12     	; 0x124 <serial_finit+0x3e>
 130:	a8 01       	movw	r20, r16
 132:	97 01       	movw	r18, r14
 134:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__divmodsi4>
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
	
	UQFront=UQEnd=-1;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	80 93 7e 00 	sts	0x007E, r24
 142:	80 91 7e 00 	lds	r24, 0x007E
 146:	80 93 7d 00 	sts	0x007D, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
 14a:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
 14c:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
 14e:	86 e8       	ldi	r24, 0x86	; 134
 150:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
 152:	88 e9       	ldi	r24, 0x98	; 152
 154:	8a b9       	out	0x0a, r24	; 10
	sei();
 156:	78 94       	sei

}
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <serial_read>:
unsigned char serial_read()
{
	char data;
	
	
	if(UQFront==-1)
 162:	80 91 7d 00 	lds	r24, 0x007D
 166:	8f 3f       	cpi	r24, 0xFF	; 255
 168:	11 f4       	brne	.+4      	; 0x16e <serial_read+0xc>
 16a:	e0 e0       	ldi	r30, 0x00	; 0
 16c:	1d c0       	rjmp	.+58     	; 0x1a8 <serial_read+0x46>
		return 0;
	
	data=URBuff[UQFront];
 16e:	e0 91 7d 00 	lds	r30, 0x007D
 172:	ff 27       	eor	r31, r31
 174:	e7 fd       	sbrc	r30, 7
 176:	f0 95       	com	r31
 178:	e1 58       	subi	r30, 0x81	; 129
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
 17e:	90 91 7d 00 	lds	r25, 0x007D
 182:	80 91 7e 00 	lds	r24, 0x007E
 186:	98 17       	cp	r25, r24
 188:	41 f4       	brne	.+16     	; 0x19a <serial_read+0x38>
	{
	
	UQFront=UQEnd=-1;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 93 7e 00 	sts	0x007E, r24
 190:	80 91 7e 00 	lds	r24, 0x007E
 194:	80 93 7d 00 	sts	0x007D, r24
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <serial_read+0x46>
	}
	else
	{
		UQFront++;
 19a:	80 91 7d 00 	lds	r24, 0x007D
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 7d 00 	sts	0x007D, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 1a4:	80 91 7d 00 	lds	r24, 0x007D
		UQFront=0;
	}

	return data;
}
 1a8:	8e 2f       	mov	r24, r30
 1aa:	08 95       	ret

000001ac <serial_char>:

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
 1ac:	5d 9b       	sbis	0x0b, 5	; 11
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <serial_char>

	
	UDR=data;
 1b0:	8c b9       	out	0x0c, r24	; 12
}
 1b2:	08 95       	ret

000001b4 <serial_string>:
}



void serial_string(char *str)
{
 1b4:	fc 01       	movw	r30, r24
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <serial_string+0xc>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
 1b8:	5d 9b       	sbis	0x0b, 5	; 11
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <serial_string+0x4>

	
	UDR=data;
 1bc:	8c b9       	out	0x0c, r24	; 12
void serial_string(char *str)
{
	while((*str)!='\0')
	{
		serial_char(*str);
		str++;
 1be:	31 96       	adiw	r30, 0x01	; 1



void serial_string(char *str)
{
	while((*str)!='\0')
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	c9 f7       	brne	.-14     	; 0x1b8 <serial_string+0x4>
	{
		serial_char(*str);
		str++;
	}
}
 1c6:	08 95       	ret

000001c8 <serial_string_P>:


void serial_string_P(const char *progmem_s)
{
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <serial_string_P+0x8>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
 1ca:	5d 9b       	sbis	0x0b, 5	; 11
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <serial_string_P+0x2>

	
	UDR=data;
 1ce:	2c b9       	out	0x0c, r18	; 12
 1d0:	fc 01       	movw	r30, r24

register char c;

	
	
	while ( (c = pgm_read_byte(progmem_s++))!='\0' ) {
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	24 91       	lpm	r18, Z+
 1d6:	22 23       	and	r18, r18
 1d8:	c1 f7       	brne	.-16     	; 0x1ca <serial_string_P+0x2>
       serial_char(c);
		//progmem_s++;
    }
	
}
 1da:	08 95       	ret

000001dc <s_readbuffer>:


void s_readbuffer(void *buff,uint16_t len)
{
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	7c 01       	movw	r14, r24
 1ea:	8b 01       	movw	r16, r22
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <s_readbuffer+0x24>
	uint16_t i;
	for(i=0;i<len;i++)
	{
		((char*)buff)[i]=serial_read();
 1f2:	0e 94 b1 00 	call	0x162	; 0x162 <serial_read>
 1f6:	f7 01       	movw	r30, r14
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	80 83       	st	Z, r24


void s_readbuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	c0 17       	cp	r28, r16
 202:	d1 07       	cpc	r29, r17
 204:	b0 f3       	brcs	.-20     	; 0x1f2 <s_readbuffer+0x16>
	{
		((char*)buff)[i]=serial_read();
	}
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

00000214 <serial_available>:

uint8_t serial_available()
{
	if(UQFront==-1) return 0;
 214:	80 91 7d 00 	lds	r24, 0x007D
 218:	8f 3f       	cpi	r24, 0xFF	; 255
 21a:	11 f4       	brne	.+4      	; 0x220 <serial_available+0xc>
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	1a c0       	rjmp	.+52     	; 0x254 <serial_available+0x40>
	if(UQFront<UQEnd)
 220:	90 91 7d 00 	lds	r25, 0x007D
 224:	80 91 7e 00 	lds	r24, 0x007E
 228:	98 17       	cp	r25, r24
 22a:	34 f4       	brge	.+12     	; 0x238 <serial_available+0x24>
		return(UQEnd-UQFront+1);
 22c:	90 91 7e 00 	lds	r25, 0x007E
 230:	80 91 7d 00 	lds	r24, 0x007D
 234:	9f 5f       	subi	r25, 0xFF	; 255
 236:	0d c0       	rjmp	.+26     	; 0x252 <serial_available+0x3e>
	else if(UQFront>UQEnd)
 238:	90 91 7d 00 	lds	r25, 0x007D
 23c:	80 91 7e 00 	lds	r24, 0x007E
 240:	89 17       	cp	r24, r25
 242:	14 f0       	brlt	.+4      	; 0x248 <serial_available+0x34>
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	06 c0       	rjmp	.+12     	; 0x254 <serial_available+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 248:	90 91 7e 00 	lds	r25, 0x007E
 24c:	80 91 7d 00 	lds	r24, 0x007D
 250:	93 5d       	subi	r25, 0xD3	; 211
 252:	98 1b       	sub	r25, r24
	else
		return 1;
}
 254:	89 2f       	mov	r24, r25
 256:	08 95       	ret

00000258 <s_clearbuffer>:




void s_clearbuffer()
{
 258:	02 c0       	rjmp	.+4      	; 0x25e <s_clearbuffer+0x6>
	while(serial_available()>0)
	{
		serial_read();
 25a:	0e 94 b1 00 	call	0x162	; 0x162 <serial_read>



void s_clearbuffer()
{
	while(serial_available()>0)
 25e:	0e 94 0a 01 	call	0x214	; 0x214 <serial_available>
 262:	88 23       	and	r24, r24
 264:	d1 f7       	brne	.-12     	; 0x25a <s_clearbuffer+0x2>
	{
		serial_read();
	}
}
 266:	08 95       	ret

00000268 <serial_nreadw>:




char serial_nreadw(char *msg,unsigned char length)
{
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	16 2f       	mov	r17, r22

   while(serial_available()<length);		
 272:	0e 94 0a 01 	call	0x214	; 0x214 <serial_available>
 276:	81 17       	cp	r24, r17
 278:	e0 f3       	brcs	.-8      	; 0x272 <serial_nreadw+0xa>
	s_readbuffer(msg,length);
 27a:	ce 01       	movw	r24, r28
 27c:	61 2f       	mov	r22, r17
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	0e 94 ee 00 	call	0x1dc	; 0x1dc <s_readbuffer>
	return 1;
	
}
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	08 95       	ret

0000028e <serial_nread>:


char serial_nread(char *msg,unsigned char length)
{
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
 296:	16 2f       	mov	r17, r22

  if(serial_available()>=length)
 298:	0e 94 0a 01 	call	0x214	; 0x214 <serial_available>
 29c:	81 17       	cp	r24, r17
 29e:	38 f0       	brcs	.+14     	; 0x2ae <serial_nread+0x20>
{	
	s_readbuffer(msg,length);
 2a0:	ce 01       	movw	r24, r28
 2a2:	61 2f       	mov	r22, r17
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <s_readbuffer>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <serial_nread+0x24>
	return 1;
	
}
else{
       msg[0]='\0';
 2ae:	18 82       	st	Y, r1
 2b0:	80 e0       	ldi	r24, 0x00	; 0
	  return 0;
}


	
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	08 95       	ret

000002ba <__vector_13>:




ISR(USART_RXC_VECT)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	
	char data=UDR;
 2d2:	4c b1       	in	r20, 0x0c	; 12

	

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 2d4:	80 91 7e 00 	lds	r24, 0x007E
 2d8:	80 91 7e 00 	lds	r24, 0x007E
 2dc:	20 91 7d 00 	lds	r18, 0x007D
 2e0:	99 27       	eor	r25, r25
 2e2:	87 fd       	sbrc	r24, 7
 2e4:	90 95       	com	r25
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	33 27       	eor	r19, r19
 2ea:	27 fd       	sbrc	r18, 7
 2ec:	30 95       	com	r19
 2ee:	82 17       	cp	r24, r18
 2f0:	93 07       	cpc	r25, r19
 2f2:	39 f4       	brne	.+14     	; 0x302 <__vector_13+0x48>
	{
		
		UQFront++;
 2f4:	80 91 7d 00 	lds	r24, 0x007D
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 7d 00 	sts	0x007D, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 2fe:	80 91 7d 00 	lds	r24, 0x007D
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 302:	80 91 7e 00 	lds	r24, 0x007E
		UQEnd=0;
	else
		UQEnd++;
 306:	80 91 7e 00 	lds	r24, 0x007E
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 7e 00 	sts	0x007E, r24


	URBuff[UQEnd]=data;
 310:	e0 91 7e 00 	lds	r30, 0x007E
 314:	ff 27       	eor	r31, r31
 316:	e7 fd       	sbrc	r30, 7
 318:	f0 95       	com	r31
 31a:	e1 58       	subi	r30, 0x81	; 129
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 320:	80 91 7d 00 	lds	r24, 0x007D
 324:	8f 3f       	cpi	r24, 0xFF	; 255
 326:	11 f4       	brne	.+4      	; 0x32c <__vector_13+0x72>
 328:	10 92 7d 00 	sts	0x007D, r1

}
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <urclear>:



void urclear()
{
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
   for(int i=0;i<128;i++)
   {
      URBuff[i]='\0';
 348:	fc 01       	movw	r30, r24
 34a:	e1 58       	subi	r30, 0x81	; 129
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	10 82       	st	Z, r1



void urclear()
{
   for(int i=0;i<128;i++)
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	80 38       	cpi	r24, 0x80	; 128
 354:	91 05       	cpc	r25, r1
 356:	c1 f7       	brne	.-16     	; 0x348 <urclear+0x4>
   {
      URBuff[i]='\0';
   } 

}
 358:	08 95       	ret

0000035a <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 35a:	66 23       	and	r22, r22
 35c:	11 f0       	breq	.+4      	; 0x362 <lcd_write+0x8>
       lcd_rs_high();
 35e:	dc 9a       	sbi	0x1b, 4	; 27
 360:	01 c0       	rjmp	.+2      	; 0x364 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 362:	dc 98       	cbi	0x1b, 4	; 27
    }
    lcd_rw_low();
 364:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 366:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 368:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 36a:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 36c:	a7 9a       	sbi	0x14, 7	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 36e:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 370:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 372:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 374:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 376:	87 fd       	sbrc	r24, 7
 378:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 37a:	86 fd       	sbrc	r24, 6
 37c:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 37e:	85 fd       	sbrc	r24, 5
 380:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 382:	84 fd       	sbrc	r24, 4
 384:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 386:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 388:	00 c0       	rjmp	.+0      	; 0x38a <lcd_write+0x30>
    lcd_e_low();
 38a:	de 98       	cbi	0x1b, 6	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 38c:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 38e:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 390:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 392:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 394:	83 fd       	sbrc	r24, 3
 396:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 398:	82 fd       	sbrc	r24, 2
 39a:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 39c:	81 fd       	sbrc	r24, 1
 39e:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 3a0:	80 fd       	sbrc	r24, 0
 3a2:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3a4:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_write+0x4e>
    lcd_e_low();
 3a8:	de 98       	cbi	0x1b, 6	; 27
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 3aa:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 3ac:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 3ae:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 3b0:	af 9a       	sbi	0x15, 7	; 21
    }
}
 3b2:	08 95       	ret

000003b4 <lcd_waitbusy>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	97 e2       	ldi	r25, 0x27	; 39
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_waitbusy+0x4>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_waitbusy+0xc>
 3c4:	dc 98       	cbi	0x1b, 4	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
 3c6:	dd 9a       	sbi	0x1b, 5	; 27
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 3c8:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 3ca:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 3cc:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 3ce:	a7 98       	cbi	0x14, 7	; 20
                
        /* read high nibble first */
        lcd_e_high();
 3d0:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();        
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <lcd_waitbusy+0x20>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 3d4:	9c 9b       	sbis	0x13, 4	; 19
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <lcd_waitbusy+0x28>
 3d8:	80 e1       	ldi	r24, 0x10	; 16
 3da:	01 c0       	rjmp	.+2      	; 0x3de <lcd_waitbusy+0x2a>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 3de:	9d 99       	sbic	0x13, 5	; 19
 3e0:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 3e2:	9e 99       	sbic	0x13, 6	; 19
 3e4:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 3e6:	9f 99       	sbic	0x13, 7	; 19
 3e8:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 3ea:	de 98       	cbi	0x1b, 6	; 27

        lcd_e_delay();                       /* Enable 500ns low       */
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <lcd_waitbusy+0x3a>
    
        /* read low nibble */    
        lcd_e_high();
 3ee:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_waitbusy+0x3e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 3f2:	9c 99       	sbic	0x13, 4	; 19
 3f4:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 3f6:	9d 99       	sbic	0x13, 5	; 19
 3f8:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 3fa:	9e 99       	sbic	0x13, 6	; 19
 3fc:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 3fe:	9f 99       	sbic	0x13, 7	; 19
 400:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 402:	de 98       	cbi	0x1b, 6	; 27
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    
}/* lcd_waitbusy */
 404:	08 95       	ret

00000406 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 406:	1f 93       	push	r17
 408:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 40a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_waitbusy>
    lcd_write(cmd,0);
 40e:	81 2f       	mov	r24, r17
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_write>
}
 416:	1f 91       	pop	r17
 418:	08 95       	ret

0000041a <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 41a:	1f 93       	push	r17
 41c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 41e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_waitbusy>
    lcd_write(data,1);
 422:	81 2f       	mov	r24, r17
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_write>
}
 42a:	1f 91       	pop	r17
 42c:	08 95       	ret

0000042e <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 42e:	66 23       	and	r22, r22
 430:	11 f4       	brne	.+4      	; 0x436 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 432:	80 58       	subi	r24, 0x80	; 128
 434:	01 c0       	rjmp	.+2      	; 0x438 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 436:	80 54       	subi	r24, 0x40	; 64
 438:	0e 94 03 02 	call	0x406	; 0x406 <lcd_command>
 43c:	08 95       	ret

0000043e <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 43e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_waitbusy>
}
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	08 95       	ret

00000446 <lcd_clear>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clear(void)
{
    lcd_command(1<<LCD_CLR);
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 03 02 	call	0x406	; 0x406 <lcd_command>
}
 44c:	08 95       	ret

0000044e <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	0e 94 03 02 	call	0x406	; 0x406 <lcd_command>
}
 454:	08 95       	ret

00000456 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 456:	1f 93       	push	r17
 458:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 45a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_waitbusy>
    if (c=='\n')
 45e:	1a 30       	cpi	r17, 0x0A	; 10
 460:	49 f4       	brne	.+18     	; 0x474 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 462:	80 34       	cpi	r24, 0x40	; 64
 464:	10 f0       	brcs	.+4      	; 0x46a <lcd_putc+0x14>
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	01 c0       	rjmp	.+2      	; 0x46c <lcd_putc+0x16>
 46a:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 46c:	80 58       	subi	r24, 0x80	; 128
 46e:	0e 94 03 02 	call	0x406	; 0x406 <lcd_command>
 472:	04 c0       	rjmp	.+8      	; 0x47c <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 474:	81 2f       	mov	r24, r17
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_write>
    }

}/* lcd_putc */
 47c:	1f 91       	pop	r17
 47e:	08 95       	ret

00000480 <lcd_string>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
 486:	02 c0       	rjmp	.+4      	; 0x48c <lcd_string+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 488:	0e 94 2b 02 	call	0x456	; 0x456 <lcd_putc>
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 48c:	89 91       	ld	r24, Y+
 48e:	88 23       	and	r24, r24
 490:	d9 f7       	brne	.-10     	; 0x488 <lcd_string+0x8>
        lcd_putc(c);
    }

}/* lcd_string */
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 4a0:	0e 94 2b 02 	call	0x456	; 0x456 <lcd_putc>
 4a4:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 4a6:	21 96       	adiw	r28, 0x01	; 1
 4a8:	84 91       	lpm	r24, Z+
 4aa:	88 23       	and	r24, r24
 4ac:	c9 f7       	brne	.-14     	; 0x4a0 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <lcd_init>:
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 4b4:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 4b6:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 4b8:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 4ba:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 4bc:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 4be:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 4c0:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	9d e7       	ldi	r25, 0x7D	; 125
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 4ca:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 4cc:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 4ce:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <lcd_init+0x1e>
    lcd_e_low();
 4d2:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	97 e2       	ldi	r25, 0x27	; 39
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <lcd_init+0x24>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 4dc:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <lcd_init+0x2c>
    lcd_e_low();
 4e0:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	31 97       	sbiw	r30, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <lcd_init+0x34>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 4ec:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <lcd_init+0x3c>
    lcd_e_low();
 4f0:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4f2:	fc 01       	movw	r30, r24
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 4f8:	ac 98       	cbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 4fa:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_init+0x4a>
    lcd_e_low();
 4fe:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 504:	88 e2       	ldi	r24, 0x28	; 40
 506:	0e 94 03 02 	call	0x406	; 0x406 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 50a:	88 e0       	ldi	r24, 0x08	; 8
 50c:	0e 94 03 02 	call	0x406	; 0x406 <lcd_command>
    lcd_clear();                           /* display clear                */ 
 510:	0e 94 23 02 	call	0x446	; 0x446 <lcd_clear>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 514:	86 e0       	ldi	r24, 0x06	; 6
 516:	0e 94 03 02 	call	0x406	; 0x406 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 51a:	8c e0       	ldi	r24, 0x0C	; 12
 51c:	0e 94 03 02 	call	0x406	; 0x406 <lcd_command>

}/* lcd_init */
 520:	08 95       	ret

00000522 <rfid_read>:


unsigned char card_id[15];
long rfid_read()
{
       while(serial_available()<=8);
 522:	0e 94 0a 01 	call	0x214	; 0x214 <serial_available>
 526:	89 30       	cpi	r24, 0x09	; 9
 528:	e0 f3       	brcs	.-8      	; 0x522 <rfid_read>
 52a:	84 ef       	ldi	r24, 0xF4	; 244
 52c:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 52e:	20 e9       	ldi	r18, 0x90	; 144
 530:	31 e0       	ldi	r19, 0x01	; 1
 532:	f9 01       	movw	r30, r18
 534:	31 97       	sbiw	r30, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <rfid_read+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 538:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 53a:	d9 f7       	brne	.-10     	; 0x532 <rfid_read+0x10>
        _delay_ms(50);
		 serial_read();
 53c:	0e 94 b1 00 	call	0x162	; 0x162 <serial_read>
			    serial_read();	
 540:	0e 94 b1 00 	call	0x162	; 0x162 <serial_read>
	   
	    s_readbuffer(card_id,8);	       
 544:	8e e6       	ldi	r24, 0x6E	; 110
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	68 e0       	ldi	r22, 0x08	; 8
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <s_readbuffer>
		char *eptr;  
		
		 s_clearbuffer();
 550:	0e 94 2c 01 	call	0x258	; 0x258 <s_clearbuffer>
		
			return strtol(card_id,  eptr, 16);
 554:	8e e6       	ldi	r24, 0x6E	; 110
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	40 e1       	ldi	r20, 0x10	; 16
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	0e 94 c9 05 	call	0xb92	; 0xb92 <strtol>
}
 564:	08 95       	ret

00000566 <lcd_num>:

/*************************************************************************
Snumber display
*************************************************************************/
void lcd_num(long num)
{
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	df 93       	push	r29
 56c:	cf 93       	push	r28
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	27 97       	sbiw	r28, 0x07	; 7
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	f8 94       	cli
 578:	de bf       	out	0x3e, r29	; 62
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	cd bf       	out	0x3d, r28	; 61
char buffer[7];

 ltoa( num , buffer, 10);
 57e:	8e 01       	movw	r16, r28
 580:	0f 5f       	subi	r16, 0xFF	; 255
 582:	1f 4f       	sbci	r17, 0xFF	; 255
 584:	a8 01       	movw	r20, r16
 586:	2a e0       	ldi	r18, 0x0A	; 10
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	0e 94 8b 07 	call	0xf16	; 0xf16 <ltoa>
    lcd_string(buffer);
 58e:	c8 01       	movw	r24, r16
 590:	0e 94 40 02 	call	0x480	; 0x480 <lcd_string>
}
 594:	27 96       	adiw	r28, 0x07	; 7
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	f8 94       	cli
 59a:	de bf       	out	0x3e, r29	; 62
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	cd bf       	out	0x3d, r28	; 61
 5a0:	cf 91       	pop	r28
 5a2:	df 91       	pop	r29
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <main>:
#include "lcd.h"
#include "rfid.h"


int main()
{
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
	unsigned long cardnumber;	//creating a variable of type char in order to store the card number
	
	lcd_init();	//initializing the lcd 
 5b2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcd_init>
	
	serial_init(9600); 	//initializing the serial comm
 5b6:	80 e8       	ldi	r24, 0x80	; 128
 5b8:	95 e2       	ldi	r25, 0x25	; 37
 5ba:	0e 94 49 00 	call	0x92	; 0x92 <serial_init>
	
	serial_select(0);	//selecting serial comm 0
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <serial_select>
	
	lcd_string("Swipe Card");
 5c6:	80 e6       	ldi	r24, 0x60	; 96
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 40 02 	call	0x480	; 0x480 <lcd_string>
	
	int light=0;
	
	while (1)
	{
	cardnumber = rfid_read(); //function to rad the rfid value as per written in the library
 5ce:	0e 94 91 02 	call	0x522	; 0x522 <rfid_read>
 5d2:	7b 01       	movw	r14, r22
 5d4:	8c 01       	movw	r16, r24
	
	lcd_gotoxy(0,1);
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_gotoxy>
	lcd_num(cardnumber);	//displaying the rfid value on the lcd
 5de:	c8 01       	movw	r24, r16
 5e0:	b7 01       	movw	r22, r14
 5e2:	0e 94 b3 02 	call	0x566	; 0x566 <lcd_num>
	if((cardnumber==8764230) && (light==0))
 5e6:	86 e4       	ldi	r24, 0x46	; 70
 5e8:	e8 16       	cp	r14, r24
 5ea:	8b eb       	ldi	r24, 0xBB	; 187
 5ec:	f8 06       	cpc	r15, r24
 5ee:	85 e8       	ldi	r24, 0x85	; 133
 5f0:	08 07       	cpc	r16, r24
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	18 07       	cpc	r17, r24
 5f6:	59 f7       	brne	.-42     	; 0x5ce <main+0x24>
	{
	write(portb,all,h);
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	69 e0       	ldi	r22, 0x09	; 9
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	0e 94 bd 03 	call	0x77a	; 0x77a <write>
	
	}
	
	if((cardnumber==8764230) &&(light==1))
	{
	  write(portb,all,l);
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	69 e0       	ldi	r22, 0x09	; 9
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	0e 94 bd 03 	call	0x77a	; 0x77a <write>
 618:	da cf       	rjmp	.-76     	; 0x5ce <main+0x24>

0000061a <serial_numl>:
}



void serial_numl(long num)
{
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	df 93       	push	r29
 620:	cf 93       	push	r28
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
 626:	27 97       	sbiw	r28, 0x07	; 7
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	0f be       	out	0x3f, r0	; 63
 630:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 ltoa( num , buffer, 10);
 632:	8e 01       	movw	r16, r28
 634:	0f 5f       	subi	r16, 0xFF	; 255
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	a8 01       	movw	r20, r16
 63a:	2a e0       	ldi	r18, 0x0A	; 10
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	0e 94 8b 07 	call	0xf16	; 0xf16 <ltoa>
    serial_string(buffer);
 642:	c8 01       	movw	r24, r16
 644:	0e 94 da 00 	call	0x1b4	; 0x1b4 <serial_string>
}
 648:	27 96       	adiw	r28, 0x07	; 7
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
 654:	cf 91       	pop	r28
 656:	df 91       	pop	r29
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	08 95       	ret

0000065e <serial_num>:

void serial_num(int num)
{
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	df 93       	push	r29
 664:	cf 93       	push	r28
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	27 97       	sbiw	r28, 0x07	; 7
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 itoa( num , buffer, 10);
 676:	8e 01       	movw	r16, r28
 678:	0f 5f       	subi	r16, 0xFF	; 255
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	b8 01       	movw	r22, r16
 67e:	4a e0       	ldi	r20, 0x0A	; 10
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	0e 94 6a 07 	call	0xed4	; 0xed4 <itoa>
    serial_string(buffer);
 686:	c8 01       	movw	r24, r16
 688:	0e 94 da 00 	call	0x1b4	; 0x1b4 <serial_string>
}
 68c:	27 96       	adiw	r28, 0x07	; 7
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	f8 94       	cli
 692:	de bf       	out	0x3e, r29	; 62
 694:	0f be       	out	0x3f, r0	; 63
 696:	cd bf       	out	0x3d, r28	; 61
 698:	cf 91       	pop	r28
 69a:	df 91       	pop	r29
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	08 95       	ret

000006a2 <read>:
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	f9 f0       	breq	.+62     	; 0x6e4 <read+0x42>
 6a6:	83 30       	cpi	r24, 0x03	; 3
 6a8:	18 f4       	brcc	.+6      	; 0x6b0 <read+0xe>
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	31 f4       	brne	.+12     	; 0x6ba <read+0x18>
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <read+0x1c>
 6b0:	83 30       	cpi	r24, 0x03	; 3
 6b2:	59 f1       	breq	.+86     	; 0x70a <read+0x68>
 6b4:	84 30       	cpi	r24, 0x04	; 4
 6b6:	09 f4       	brne	.+2      	; 0x6ba <read+0x18>
 6b8:	42 c0       	rjmp	.+132    	; 0x73e <read+0x9c>
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	08 95       	ret
 6be:	69 30       	cpi	r22, 0x09	; 9
 6c0:	19 f4       	brne	.+6      	; 0x6c8 <read+0x26>
 6c2:	1a ba       	out	0x1a, r1	; 26
 6c4:	89 b3       	in	r24, 0x19	; 25
 6c6:	08 95       	ret
 6c8:	8a b3       	in	r24, 0x1a	; 26
 6ca:	21 e0       	ldi	r18, 0x01	; 1
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	06 2e       	mov	r0, r22
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <read+0x34>
 6d2:	22 0f       	add	r18, r18
 6d4:	33 1f       	adc	r19, r19
 6d6:	0a 94       	dec	r0
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <read+0x30>
 6da:	20 95       	com	r18
 6dc:	28 23       	and	r18, r24
 6de:	2a bb       	out	0x1a, r18	; 26
 6e0:	89 b3       	in	r24, 0x19	; 25
 6e2:	25 c0       	rjmp	.+74     	; 0x72e <read+0x8c>
 6e4:	69 30       	cpi	r22, 0x09	; 9
 6e6:	19 f4       	brne	.+6      	; 0x6ee <read+0x4c>
 6e8:	17 ba       	out	0x17, r1	; 23
 6ea:	86 b3       	in	r24, 0x16	; 22
 6ec:	08 95       	ret
 6ee:	87 b3       	in	r24, 0x17	; 23
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	06 2e       	mov	r0, r22
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <read+0x5a>
 6f8:	22 0f       	add	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	0a 94       	dec	r0
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <read+0x56>
 700:	20 95       	com	r18
 702:	28 23       	and	r18, r24
 704:	27 bb       	out	0x17, r18	; 23
 706:	86 b3       	in	r24, 0x16	; 22
 708:	12 c0       	rjmp	.+36     	; 0x72e <read+0x8c>
 70a:	69 30       	cpi	r22, 0x09	; 9
 70c:	19 f4       	brne	.+6      	; 0x714 <read+0x72>
 70e:	14 ba       	out	0x14, r1	; 20
 710:	83 b3       	in	r24, 0x13	; 19
 712:	08 95       	ret
 714:	84 b3       	in	r24, 0x14	; 20
 716:	21 e0       	ldi	r18, 0x01	; 1
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	06 2e       	mov	r0, r22
 71c:	02 c0       	rjmp	.+4      	; 0x722 <read+0x80>
 71e:	22 0f       	add	r18, r18
 720:	33 1f       	adc	r19, r19
 722:	0a 94       	dec	r0
 724:	e2 f7       	brpl	.-8      	; 0x71e <read+0x7c>
 726:	20 95       	com	r18
 728:	28 23       	and	r18, r24
 72a:	24 bb       	out	0x14, r18	; 20
 72c:	83 b3       	in	r24, 0x13	; 19
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <read+0x94>
 732:	95 95       	asr	r25
 734:	87 95       	ror	r24
 736:	6a 95       	dec	r22
 738:	e2 f7       	brpl	.-8      	; 0x732 <read+0x90>
 73a:	81 70       	andi	r24, 0x01	; 1
 73c:	08 95       	ret
 73e:	69 30       	cpi	r22, 0x09	; 9
 740:	19 f4       	brne	.+6      	; 0x748 <read+0xa6>
 742:	11 ba       	out	0x11, r1	; 17
 744:	80 b3       	in	r24, 0x10	; 16
 746:	08 95       	ret
 748:	31 b3       	in	r19, 0x11	; 17
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	06 2e       	mov	r0, r22
 750:	02 c0       	rjmp	.+4      	; 0x756 <read+0xb4>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	0a 94       	dec	r0
 758:	e2 f7       	brpl	.-8      	; 0x752 <read+0xb0>
 75a:	28 2f       	mov	r18, r24
 75c:	20 95       	com	r18
 75e:	23 23       	and	r18, r19
 760:	21 bb       	out	0x11, r18	; 17
 762:	22 b3       	in	r18, 0x12	; 18
 764:	82 2b       	or	r24, r18
 766:	82 bb       	out	0x12, r24	; 18
 768:	80 b3       	in	r24, 0x10	; 16
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	02 c0       	rjmp	.+4      	; 0x772 <read+0xd0>
 76e:	95 95       	asr	r25
 770:	87 95       	ror	r24
 772:	6a 95       	dec	r22
 774:	e2 f7       	brpl	.-8      	; 0x76e <read+0xcc>
 776:	81 70       	andi	r24, 0x01	; 1
 778:	08 95       	ret

0000077a <write>:
 77a:	82 30       	cpi	r24, 0x02	; 2
 77c:	09 f4       	brne	.+2      	; 0x780 <write+0x6>
 77e:	41 c0       	rjmp	.+130    	; 0x802 <write+0x88>
 780:	83 30       	cpi	r24, 0x03	; 3
 782:	20 f4       	brcc	.+8      	; 0x78c <write+0x12>
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	09 f0       	breq	.+2      	; 0x78a <write+0x10>
 788:	d7 c0       	rjmp	.+430    	; 0x938 <__stack+0xd9>
 78a:	07 c0       	rjmp	.+14     	; 0x79a <write+0x20>
 78c:	83 30       	cpi	r24, 0x03	; 3
 78e:	09 f4       	brne	.+2      	; 0x792 <write+0x18>
 790:	6c c0       	rjmp	.+216    	; 0x86a <__stack+0xb>
 792:	84 30       	cpi	r24, 0x04	; 4
 794:	09 f0       	breq	.+2      	; 0x798 <write+0x1e>
 796:	d0 c0       	rjmp	.+416    	; 0x938 <__stack+0xd9>
 798:	9c c0       	rjmp	.+312    	; 0x8d2 <__stack+0x73>
 79a:	6b 35       	cpi	r22, 0x5B	; 91
 79c:	21 f4       	brne	.+8      	; 0x7a6 <write+0x2c>
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	8a bb       	out	0x1a, r24	; 26
 7a2:	4b bb       	out	0x1b, r20	; 27
 7a4:	08 95       	ret
 7a6:	44 23       	and	r20, r20
 7a8:	21 f0       	breq	.+8      	; 0x7b2 <write+0x38>
 7aa:	41 30       	cpi	r20, 0x01	; 1
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <write+0x36>
 7ae:	c4 c0       	rjmp	.+392    	; 0x938 <__stack+0xd9>
 7b0:	14 c0       	rjmp	.+40     	; 0x7da <write+0x60>
 7b2:	69 30       	cpi	r22, 0x09	; 9
 7b4:	21 f4       	brne	.+8      	; 0x7be <write+0x44>
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	8a bb       	out	0x1a, r24	; 26
 7ba:	1b ba       	out	0x1b, r1	; 27
 7bc:	08 95       	ret
 7be:	8a b3       	in	r24, 0x1a	; 26
 7c0:	21 e0       	ldi	r18, 0x01	; 1
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <write+0x50>
 7c6:	22 0f       	add	r18, r18
 7c8:	33 1f       	adc	r19, r19
 7ca:	6a 95       	dec	r22
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <write+0x4c>
 7ce:	82 2b       	or	r24, r18
 7d0:	8a bb       	out	0x1a, r24	; 26
 7d2:	8b b3       	in	r24, 0x1b	; 27
 7d4:	20 95       	com	r18
 7d6:	28 23       	and	r18, r24
 7d8:	12 c0       	rjmp	.+36     	; 0x7fe <write+0x84>
 7da:	69 30       	cpi	r22, 0x09	; 9
 7dc:	21 f4       	brne	.+8      	; 0x7e6 <write+0x6c>
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	8a bb       	out	0x1a, r24	; 26
 7e2:	8b bb       	out	0x1b, r24	; 27
 7e4:	08 95       	ret
 7e6:	8a b3       	in	r24, 0x1a	; 26
 7e8:	21 e0       	ldi	r18, 0x01	; 1
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <write+0x78>
 7ee:	22 0f       	add	r18, r18
 7f0:	33 1f       	adc	r19, r19
 7f2:	6a 95       	dec	r22
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <write+0x74>
 7f6:	82 2b       	or	r24, r18
 7f8:	8a bb       	out	0x1a, r24	; 26
 7fa:	8b b3       	in	r24, 0x1b	; 27
 7fc:	28 2b       	or	r18, r24
 7fe:	2b bb       	out	0x1b, r18	; 27
 800:	08 95       	ret
 802:	6b 35       	cpi	r22, 0x5B	; 91
 804:	21 f4       	brne	.+8      	; 0x80e <write+0x94>
 806:	8f ef       	ldi	r24, 0xFF	; 255
 808:	87 bb       	out	0x17, r24	; 23
 80a:	48 bb       	out	0x18, r20	; 24
 80c:	08 95       	ret
 80e:	44 23       	and	r20, r20
 810:	21 f0       	breq	.+8      	; 0x81a <write+0xa0>
 812:	41 30       	cpi	r20, 0x01	; 1
 814:	09 f0       	breq	.+2      	; 0x818 <write+0x9e>
 816:	90 c0       	rjmp	.+288    	; 0x938 <__stack+0xd9>
 818:	14 c0       	rjmp	.+40     	; 0x842 <write+0xc8>
 81a:	69 30       	cpi	r22, 0x09	; 9
 81c:	21 f4       	brne	.+8      	; 0x826 <write+0xac>
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	87 bb       	out	0x17, r24	; 23
 822:	18 ba       	out	0x18, r1	; 24
 824:	08 95       	ret
 826:	87 b3       	in	r24, 0x17	; 23
 828:	21 e0       	ldi	r18, 0x01	; 1
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <write+0xb8>
 82e:	22 0f       	add	r18, r18
 830:	33 1f       	adc	r19, r19
 832:	6a 95       	dec	r22
 834:	e2 f7       	brpl	.-8      	; 0x82e <write+0xb4>
 836:	82 2b       	or	r24, r18
 838:	87 bb       	out	0x17, r24	; 23
 83a:	88 b3       	in	r24, 0x18	; 24
 83c:	20 95       	com	r18
 83e:	28 23       	and	r18, r24
 840:	12 c0       	rjmp	.+36     	; 0x866 <__stack+0x7>
 842:	69 30       	cpi	r22, 0x09	; 9
 844:	21 f4       	brne	.+8      	; 0x84e <write+0xd4>
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	87 bb       	out	0x17, r24	; 23
 84a:	88 bb       	out	0x18, r24	; 24
 84c:	08 95       	ret
 84e:	87 b3       	in	r24, 0x17	; 23
 850:	21 e0       	ldi	r18, 0x01	; 1
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <write+0xe0>
 856:	22 0f       	add	r18, r18
 858:	33 1f       	adc	r19, r19
 85a:	6a 95       	dec	r22
 85c:	e2 f7       	brpl	.-8      	; 0x856 <write+0xdc>
 85e:	82 2b       	or	r24, r18
 860:	87 bb       	out	0x17, r24	; 23
 862:	88 b3       	in	r24, 0x18	; 24
 864:	28 2b       	or	r18, r24
 866:	28 bb       	out	0x18, r18	; 24
 868:	08 95       	ret
 86a:	6b 35       	cpi	r22, 0x5B	; 91
 86c:	21 f4       	brne	.+8      	; 0x876 <__stack+0x17>
 86e:	8f ef       	ldi	r24, 0xFF	; 255
 870:	84 bb       	out	0x14, r24	; 20
 872:	45 bb       	out	0x15, r20	; 21
 874:	08 95       	ret
 876:	44 23       	and	r20, r20
 878:	21 f0       	breq	.+8      	; 0x882 <__stack+0x23>
 87a:	41 30       	cpi	r20, 0x01	; 1
 87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
 87e:	5c c0       	rjmp	.+184    	; 0x938 <__stack+0xd9>
 880:	14 c0       	rjmp	.+40     	; 0x8aa <__stack+0x4b>
 882:	69 30       	cpi	r22, 0x09	; 9
 884:	21 f4       	brne	.+8      	; 0x88e <__stack+0x2f>
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	84 bb       	out	0x14, r24	; 20
 88a:	15 ba       	out	0x15, r1	; 21
 88c:	08 95       	ret
 88e:	84 b3       	in	r24, 0x14	; 20
 890:	21 e0       	ldi	r18, 0x01	; 1
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
 896:	22 0f       	add	r18, r18
 898:	33 1f       	adc	r19, r19
 89a:	6a 95       	dec	r22
 89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
 89e:	82 2b       	or	r24, r18
 8a0:	84 bb       	out	0x14, r24	; 20
 8a2:	85 b3       	in	r24, 0x15	; 21
 8a4:	20 95       	com	r18
 8a6:	28 23       	and	r18, r24
 8a8:	12 c0       	rjmp	.+36     	; 0x8ce <__stack+0x6f>
 8aa:	69 30       	cpi	r22, 0x09	; 9
 8ac:	21 f4       	brne	.+8      	; 0x8b6 <__stack+0x57>
 8ae:	8f ef       	ldi	r24, 0xFF	; 255
 8b0:	84 bb       	out	0x14, r24	; 20
 8b2:	85 bb       	out	0x15, r24	; 21
 8b4:	08 95       	ret
 8b6:	84 b3       	in	r24, 0x14	; 20
 8b8:	21 e0       	ldi	r18, 0x01	; 1
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
 8be:	22 0f       	add	r18, r18
 8c0:	33 1f       	adc	r19, r19
 8c2:	6a 95       	dec	r22
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
 8c6:	82 2b       	or	r24, r18
 8c8:	84 bb       	out	0x14, r24	; 20
 8ca:	85 b3       	in	r24, 0x15	; 21
 8cc:	28 2b       	or	r18, r24
 8ce:	25 bb       	out	0x15, r18	; 21
 8d0:	08 95       	ret
 8d2:	6b 35       	cpi	r22, 0x5B	; 91
 8d4:	21 f4       	brne	.+8      	; 0x8de <__stack+0x7f>
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	81 bb       	out	0x11, r24	; 17
 8da:	42 bb       	out	0x12, r20	; 18
 8dc:	08 95       	ret
 8de:	44 23       	and	r20, r20
 8e0:	19 f0       	breq	.+6      	; 0x8e8 <__stack+0x89>
 8e2:	41 30       	cpi	r20, 0x01	; 1
 8e4:	49 f5       	brne	.+82     	; 0x938 <__stack+0xd9>
 8e6:	15 c0       	rjmp	.+42     	; 0x912 <__stack+0xb3>
 8e8:	69 30       	cpi	r22, 0x09	; 9
 8ea:	21 f4       	brne	.+8      	; 0x8f4 <__stack+0x95>
 8ec:	8f ef       	ldi	r24, 0xFF	; 255
 8ee:	81 bb       	out	0x11, r24	; 17
 8f0:	12 ba       	out	0x12, r1	; 18
 8f2:	08 95       	ret
 8f4:	81 b3       	in	r24, 0x11	; 17
 8f6:	21 e0       	ldi	r18, 0x01	; 1
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
 8fc:	22 0f       	add	r18, r18
 8fe:	33 1f       	adc	r19, r19
 900:	6a 95       	dec	r22
 902:	e2 f7       	brpl	.-8      	; 0x8fc <__stack+0x9d>
 904:	82 2b       	or	r24, r18
 906:	81 bb       	out	0x11, r24	; 17
 908:	82 b3       	in	r24, 0x12	; 18
 90a:	20 95       	com	r18
 90c:	28 23       	and	r18, r24
 90e:	22 bb       	out	0x12, r18	; 18
 910:	08 95       	ret
 912:	69 30       	cpi	r22, 0x09	; 9
 914:	21 f4       	brne	.+8      	; 0x91e <__stack+0xbf>
 916:	8f ef       	ldi	r24, 0xFF	; 255
 918:	81 bb       	out	0x11, r24	; 17
 91a:	82 bb       	out	0x12, r24	; 18
 91c:	08 95       	ret
 91e:	81 b3       	in	r24, 0x11	; 17
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0xcb>
 926:	22 0f       	add	r18, r18
 928:	33 1f       	adc	r19, r19
 92a:	6a 95       	dec	r22
 92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0xc7>
 92e:	82 2b       	or	r24, r18
 930:	81 bb       	out	0x11, r24	; 17
 932:	82 b3       	in	r24, 0x12	; 18
 934:	28 2b       	or	r18, r24
 936:	22 bb       	out	0x12, r18	; 18
 938:	08 95       	ret

0000093a <direction>:
 93a:	83 30       	cpi	r24, 0x03	; 3
 93c:	19 f1       	breq	.+70     	; 0x984 <direction+0x4a>
 93e:	84 30       	cpi	r24, 0x04	; 4
 940:	09 f4       	brne	.+2      	; 0x944 <direction+0xa>
 942:	3c c0       	rjmp	.+120    	; 0x9bc <direction+0x82>
 944:	82 30       	cpi	r24, 0x02	; 2
 946:	09 f0       	breq	.+2      	; 0x94a <direction+0x10>
 948:	54 c0       	rjmp	.+168    	; 0x9f2 <direction+0xb8>
 94a:	44 23       	and	r20, r20
 94c:	21 f0       	breq	.+8      	; 0x956 <direction+0x1c>
 94e:	41 30       	cpi	r20, 0x01	; 1
 950:	09 f0       	breq	.+2      	; 0x954 <direction+0x1a>
 952:	4f c0       	rjmp	.+158    	; 0x9f2 <direction+0xb8>
 954:	0c c0       	rjmp	.+24     	; 0x96e <direction+0x34>
 956:	27 b3       	in	r18, 0x17	; 23
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	02 c0       	rjmp	.+4      	; 0x962 <direction+0x28>
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	6a 95       	dec	r22
 964:	e2 f7       	brpl	.-8      	; 0x95e <direction+0x24>
 966:	80 95       	com	r24
 968:	82 23       	and	r24, r18
 96a:	87 bb       	out	0x17, r24	; 23
 96c:	08 95       	ret
 96e:	27 b3       	in	r18, 0x17	; 23
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	02 c0       	rjmp	.+4      	; 0x97a <direction+0x40>
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	6a 95       	dec	r22
 97c:	e2 f7       	brpl	.-8      	; 0x976 <direction+0x3c>
 97e:	28 2b       	or	r18, r24
 980:	27 bb       	out	0x17, r18	; 23
 982:	08 95       	ret
 984:	44 23       	and	r20, r20
 986:	19 f0       	breq	.+6      	; 0x98e <direction+0x54>
 988:	41 30       	cpi	r20, 0x01	; 1
 98a:	99 f5       	brne	.+102    	; 0x9f2 <direction+0xb8>
 98c:	0c c0       	rjmp	.+24     	; 0x9a6 <direction+0x6c>
 98e:	24 b3       	in	r18, 0x14	; 20
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	02 c0       	rjmp	.+4      	; 0x99a <direction+0x60>
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	6a 95       	dec	r22
 99c:	e2 f7       	brpl	.-8      	; 0x996 <direction+0x5c>
 99e:	80 95       	com	r24
 9a0:	82 23       	and	r24, r18
 9a2:	84 bb       	out	0x14, r24	; 20
 9a4:	08 95       	ret
 9a6:	24 b3       	in	r18, 0x14	; 20
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <direction+0x78>
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	6a 95       	dec	r22
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <direction+0x74>
 9b6:	28 2b       	or	r18, r24
 9b8:	24 bb       	out	0x14, r18	; 20
 9ba:	08 95       	ret
 9bc:	44 23       	and	r20, r20
 9be:	19 f0       	breq	.+6      	; 0x9c6 <direction+0x8c>
 9c0:	41 30       	cpi	r20, 0x01	; 1
 9c2:	b9 f4       	brne	.+46     	; 0x9f2 <direction+0xb8>
 9c4:	0c c0       	rjmp	.+24     	; 0x9de <direction+0xa4>
 9c6:	21 b3       	in	r18, 0x11	; 17
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <direction+0x98>
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	6a 95       	dec	r22
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <direction+0x94>
 9d6:	80 95       	com	r24
 9d8:	82 23       	and	r24, r18
 9da:	81 bb       	out	0x11, r24	; 17
 9dc:	08 95       	ret
 9de:	21 b3       	in	r18, 0x11	; 17
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <direction+0xb0>
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	6a 95       	dec	r22
 9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <direction+0xac>
 9ee:	28 2b       	or	r18, r24
 9f0:	21 bb       	out	0x11, r18	; 17
 9f2:	08 95       	ret

000009f4 <serial_select>:
 9f4:	88 23       	and	r24, r24
 9f6:	21 f4       	brne	.+8      	; 0xa00 <serial_select+0xc>
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	67 e0       	ldi	r22, 0x07	; 7
 9fc:	40 e0       	ldi	r20, 0x00	; 0
 9fe:	04 c0       	rjmp	.+8      	; 0xa08 <serial_select+0x14>
 a00:	81 30       	cpi	r24, 0x01	; 1
 a02:	41 f4       	brne	.+16     	; 0xa14 <serial_select+0x20>
 a04:	67 e0       	ldi	r22, 0x07	; 7
 a06:	41 e0       	ldi	r20, 0x01	; 1
 a08:	0e 94 bd 03 	call	0x77a	; 0x77a <write>
 a0c:	83 e0       	ldi	r24, 0x03	; 3
 a0e:	62 e0       	ldi	r22, 0x02	; 2
 a10:	40 e0       	ldi	r20, 0x00	; 0
 a12:	0a c0       	rjmp	.+20     	; 0xa28 <serial_select+0x34>
 a14:	82 30       	cpi	r24, 0x02	; 2
 a16:	59 f4       	brne	.+22     	; 0xa2e <serial_select+0x3a>
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	67 e0       	ldi	r22, 0x07	; 7
 a1c:	40 e0       	ldi	r20, 0x00	; 0
 a1e:	0e 94 bd 03 	call	0x77a	; 0x77a <write>
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	62 e0       	ldi	r22, 0x02	; 2
 a26:	41 e0       	ldi	r20, 0x01	; 1
 a28:	0e 94 bd 03 	call	0x77a	; 0x77a <write>
 a2c:	08 95       	ret
 a2e:	83 30       	cpi	r24, 0x03	; 3
 a30:	51 f4       	brne	.+20     	; 0xa46 <serial_select+0x52>
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	67 e0       	ldi	r22, 0x07	; 7
 a36:	41 e0       	ldi	r20, 0x01	; 1
 a38:	0e 94 bd 03 	call	0x77a	; 0x77a <write>
 a3c:	83 e0       	ldi	r24, 0x03	; 3
 a3e:	62 e0       	ldi	r22, 0x02	; 2
 a40:	41 e0       	ldi	r20, 0x01	; 1
 a42:	0e 94 bd 03 	call	0x77a	; 0x77a <write>
 a46:	08 95       	ret

00000a48 <jsonparser>:
 a48:	ef 92       	push	r14
 a4a:	ff 92       	push	r15
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	ea 01       	movw	r28, r20
 a56:	0e 94 50 07 	call	0xea0	; 0xea0 <strstr>
 a5a:	00 97       	sbiw	r24, 0x00	; 0
 a5c:	19 f4       	brne	.+6      	; 0xa64 <jsonparser+0x1c>
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	1d c0       	rjmp	.+58     	; 0xa9e <jsonparser+0x56>
 a64:	01 96       	adiw	r24, 0x01	; 1
 a66:	6b e6       	ldi	r22, 0x6B	; 107
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	0e 94 50 07 	call	0xea0	; 0xea0 <strstr>
 a6e:	7c 01       	movw	r14, r24
 a70:	83 e0       	ldi	r24, 0x03	; 3
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	e8 0e       	add	r14, r24
 a76:	f9 1e       	adc	r15, r25
 a78:	c7 01       	movw	r24, r14
 a7a:	62 e2       	ldi	r22, 0x22	; 34
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <strchr>
 a82:	8c 01       	movw	r16, r24
 a84:	0e 19       	sub	r16, r14
 a86:	1f 09       	sbc	r17, r15
 a88:	ce 01       	movw	r24, r28
 a8a:	b7 01       	movw	r22, r14
 a8c:	a8 01       	movw	r20, r16
 a8e:	0e 94 41 07 	call	0xe82	; 0xe82 <strncpy>
 a92:	0c 0f       	add	r16, r28
 a94:	1d 1f       	adc	r17, r29
 a96:	f8 01       	movw	r30, r16
 a98:	10 82       	st	Z, r1
 a9a:	21 e0       	ldi	r18, 0x01	; 1
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	c9 01       	movw	r24, r18
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	1f 91       	pop	r17
 aa6:	0f 91       	pop	r16
 aa8:	ff 90       	pop	r15
 aaa:	ef 90       	pop	r14
 aac:	08 95       	ret

00000aae <compare>:
 aae:	db 01       	movw	r26, r22
 ab0:	0d 90       	ld	r0, X+
 ab2:	00 20       	and	r0, r0
 ab4:	e9 f7       	brne	.-6      	; 0xab0 <compare+0x2>
 ab6:	11 97       	sbiw	r26, 0x01	; 1
 ab8:	a6 1b       	sub	r26, r22
 aba:	b7 0b       	sbc	r27, r23
 abc:	4a 2f       	mov	r20, r26
 abe:	50 e0       	ldi	r21, 0x00	; 0
 ac0:	0e 94 29 07 	call	0xe52	; 0xe52 <strncasecmp>
 ac4:	20 e0       	ldi	r18, 0x00	; 0
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	89 2b       	or	r24, r25
 aca:	11 f4       	brne	.+4      	; 0xad0 <compare+0x22>
 acc:	21 e0       	ldi	r18, 0x01	; 1
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	c9 01       	movw	r24, r18
 ad2:	08 95       	ret

00000ad4 <str_num>:
 ad4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <atoi>
 ad8:	08 95       	ret

00000ada <__mulsi3>:
 ada:	62 9f       	mul	r22, r18
 adc:	d0 01       	movw	r26, r0
 ade:	73 9f       	mul	r23, r19
 ae0:	f0 01       	movw	r30, r0
 ae2:	82 9f       	mul	r24, r18
 ae4:	e0 0d       	add	r30, r0
 ae6:	f1 1d       	adc	r31, r1
 ae8:	64 9f       	mul	r22, r20
 aea:	e0 0d       	add	r30, r0
 aec:	f1 1d       	adc	r31, r1
 aee:	92 9f       	mul	r25, r18
 af0:	f0 0d       	add	r31, r0
 af2:	83 9f       	mul	r24, r19
 af4:	f0 0d       	add	r31, r0
 af6:	74 9f       	mul	r23, r20
 af8:	f0 0d       	add	r31, r0
 afa:	65 9f       	mul	r22, r21
 afc:	f0 0d       	add	r31, r0
 afe:	99 27       	eor	r25, r25
 b00:	72 9f       	mul	r23, r18
 b02:	b0 0d       	add	r27, r0
 b04:	e1 1d       	adc	r30, r1
 b06:	f9 1f       	adc	r31, r25
 b08:	63 9f       	mul	r22, r19
 b0a:	b0 0d       	add	r27, r0
 b0c:	e1 1d       	adc	r30, r1
 b0e:	f9 1f       	adc	r31, r25
 b10:	bd 01       	movw	r22, r26
 b12:	cf 01       	movw	r24, r30
 b14:	11 24       	eor	r1, r1
 b16:	08 95       	ret

00000b18 <__udivmodsi4>:
 b18:	a1 e2       	ldi	r26, 0x21	; 33
 b1a:	1a 2e       	mov	r1, r26
 b1c:	aa 1b       	sub	r26, r26
 b1e:	bb 1b       	sub	r27, r27
 b20:	fd 01       	movw	r30, r26
 b22:	0d c0       	rjmp	.+26     	; 0xb3e <__udivmodsi4_ep>

00000b24 <__udivmodsi4_loop>:
 b24:	aa 1f       	adc	r26, r26
 b26:	bb 1f       	adc	r27, r27
 b28:	ee 1f       	adc	r30, r30
 b2a:	ff 1f       	adc	r31, r31
 b2c:	a2 17       	cp	r26, r18
 b2e:	b3 07       	cpc	r27, r19
 b30:	e4 07       	cpc	r30, r20
 b32:	f5 07       	cpc	r31, r21
 b34:	20 f0       	brcs	.+8      	; 0xb3e <__udivmodsi4_ep>
 b36:	a2 1b       	sub	r26, r18
 b38:	b3 0b       	sbc	r27, r19
 b3a:	e4 0b       	sbc	r30, r20
 b3c:	f5 0b       	sbc	r31, r21

00000b3e <__udivmodsi4_ep>:
 b3e:	66 1f       	adc	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	99 1f       	adc	r25, r25
 b46:	1a 94       	dec	r1
 b48:	69 f7       	brne	.-38     	; 0xb24 <__udivmodsi4_loop>
 b4a:	60 95       	com	r22
 b4c:	70 95       	com	r23
 b4e:	80 95       	com	r24
 b50:	90 95       	com	r25
 b52:	9b 01       	movw	r18, r22
 b54:	ac 01       	movw	r20, r24
 b56:	bd 01       	movw	r22, r26
 b58:	cf 01       	movw	r24, r30
 b5a:	08 95       	ret

00000b5c <__divmodsi4>:
 b5c:	97 fb       	bst	r25, 7
 b5e:	09 2e       	mov	r0, r25
 b60:	05 26       	eor	r0, r21
 b62:	0e d0       	rcall	.+28     	; 0xb80 <__divmodsi4_neg1>
 b64:	57 fd       	sbrc	r21, 7
 b66:	04 d0       	rcall	.+8      	; 0xb70 <__divmodsi4_neg2>
 b68:	d7 df       	rcall	.-82     	; 0xb18 <__udivmodsi4>
 b6a:	0a d0       	rcall	.+20     	; 0xb80 <__divmodsi4_neg1>
 b6c:	00 1c       	adc	r0, r0
 b6e:	38 f4       	brcc	.+14     	; 0xb7e <__divmodsi4_exit>

00000b70 <__divmodsi4_neg2>:
 b70:	50 95       	com	r21
 b72:	40 95       	com	r20
 b74:	30 95       	com	r19
 b76:	21 95       	neg	r18
 b78:	3f 4f       	sbci	r19, 0xFF	; 255
 b7a:	4f 4f       	sbci	r20, 0xFF	; 255
 b7c:	5f 4f       	sbci	r21, 0xFF	; 255

00000b7e <__divmodsi4_exit>:
 b7e:	08 95       	ret

00000b80 <__divmodsi4_neg1>:
 b80:	f6 f7       	brtc	.-4      	; 0xb7e <__divmodsi4_exit>
 b82:	90 95       	com	r25
 b84:	80 95       	com	r24
 b86:	70 95       	com	r23
 b88:	61 95       	neg	r22
 b8a:	7f 4f       	sbci	r23, 0xFF	; 255
 b8c:	8f 4f       	sbci	r24, 0xFF	; 255
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	08 95       	ret

00000b92 <strtol>:
 b92:	2f 92       	push	r2
 b94:	3f 92       	push	r3
 b96:	5f 92       	push	r5
 b98:	6f 92       	push	r6
 b9a:	7f 92       	push	r7
 b9c:	8f 92       	push	r8
 b9e:	9f 92       	push	r9
 ba0:	af 92       	push	r10
 ba2:	bf 92       	push	r11
 ba4:	cf 92       	push	r12
 ba6:	df 92       	push	r13
 ba8:	ef 92       	push	r14
 baa:	ff 92       	push	r15
 bac:	0f 93       	push	r16
 bae:	1f 93       	push	r17
 bb0:	cf 93       	push	r28
 bb2:	df 93       	push	r29
 bb4:	8c 01       	movw	r16, r24
 bb6:	1b 01       	movw	r2, r22
 bb8:	ea 01       	movw	r28, r20
 bba:	61 15       	cp	r22, r1
 bbc:	71 05       	cpc	r23, r1
 bbe:	19 f0       	breq	.+6      	; 0xbc6 <strtol+0x34>
 bc0:	fb 01       	movw	r30, r22
 bc2:	91 83       	std	Z+1, r25	; 0x01
 bc4:	80 83       	st	Z, r24
 bc6:	20 97       	sbiw	r28, 0x00	; 0
 bc8:	49 f0       	breq	.+18     	; 0xbdc <strtol+0x4a>
 bca:	ce 01       	movw	r24, r28
 bcc:	02 97       	sbiw	r24, 0x02	; 2
 bce:	83 97       	sbiw	r24, 0x23	; 35
 bd0:	28 f0       	brcs	.+10     	; 0xbdc <strtol+0x4a>
 bd2:	20 e0       	ldi	r18, 0x00	; 0
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	40 e0       	ldi	r20, 0x00	; 0
 bd8:	50 e0       	ldi	r21, 0x00	; 0
 bda:	f6 c0       	rjmp	.+492    	; 0xdc8 <strtol+0x236>
 bdc:	f8 01       	movw	r30, r16
 bde:	a1 90       	ld	r10, Z+
 be0:	8f 01       	movw	r16, r30
 be2:	8a 2d       	mov	r24, r10
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	0e 94 16 07 	call	0xe2c	; 0xe2c <isspace>
 bea:	89 2b       	or	r24, r25
 bec:	b9 f7       	brne	.-18     	; 0xbdc <strtol+0x4a>
 bee:	fd e2       	ldi	r31, 0x2D	; 45
 bf0:	af 16       	cp	r10, r31
 bf2:	31 f4       	brne	.+12     	; 0xc00 <strtol+0x6e>
 bf4:	f8 01       	movw	r30, r16
 bf6:	a1 90       	ld	r10, Z+
 bf8:	8f 01       	movw	r16, r30
 bfa:	55 24       	eor	r5, r5
 bfc:	53 94       	inc	r5
 bfe:	07 c0       	rjmp	.+14     	; 0xc0e <strtol+0x7c>
 c00:	fb e2       	ldi	r31, 0x2B	; 43
 c02:	af 16       	cp	r10, r31
 c04:	19 f4       	brne	.+6      	; 0xc0c <strtol+0x7a>
 c06:	f8 01       	movw	r30, r16
 c08:	a1 90       	ld	r10, Z+
 c0a:	8f 01       	movw	r16, r30
 c0c:	55 24       	eor	r5, r5
 c0e:	20 97       	sbiw	r28, 0x00	; 0
 c10:	19 f0       	breq	.+6      	; 0xc18 <strtol+0x86>
 c12:	c0 31       	cpi	r28, 0x10	; 16
 c14:	d1 05       	cpc	r29, r1
 c16:	c1 f4       	brne	.+48     	; 0xc48 <strtol+0xb6>
 c18:	f0 e3       	ldi	r31, 0x30	; 48
 c1a:	af 16       	cp	r10, r31
 c1c:	79 f4       	brne	.+30     	; 0xc3c <strtol+0xaa>
 c1e:	f8 01       	movw	r30, r16
 c20:	80 81       	ld	r24, Z
 c22:	88 37       	cpi	r24, 0x78	; 120
 c24:	11 f0       	breq	.+4      	; 0xc2a <strtol+0x98>
 c26:	88 35       	cpi	r24, 0x58	; 88
 c28:	49 f4       	brne	.+18     	; 0xc3c <strtol+0xaa>
 c2a:	f8 01       	movw	r30, r16
 c2c:	a1 80       	ldd	r10, Z+1	; 0x01
 c2e:	0e 5f       	subi	r16, 0xFE	; 254
 c30:	1f 4f       	sbci	r17, 0xFF	; 255
 c32:	f2 e0       	ldi	r31, 0x02	; 2
 c34:	5f 2a       	or	r5, r31
 c36:	c0 e1       	ldi	r28, 0x10	; 16
 c38:	d0 e0       	ldi	r29, 0x00	; 0
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <strtol+0xb6>
 c3c:	20 97       	sbiw	r28, 0x00	; 0
 c3e:	21 f4       	brne	.+8      	; 0xc48 <strtol+0xb6>
 c40:	80 e3       	ldi	r24, 0x30	; 48
 c42:	a8 16       	cp	r10, r24
 c44:	e9 f4       	brne	.+58     	; 0xc80 <strtol+0xee>
 c46:	27 c0       	rjmp	.+78     	; 0xc96 <strtol+0x104>
 c48:	c8 30       	cpi	r28, 0x08	; 8
 c4a:	d1 05       	cpc	r29, r1
 c4c:	31 f1       	breq	.+76     	; 0xc9a <strtol+0x108>
 c4e:	c9 30       	cpi	r28, 0x09	; 9
 c50:	d1 05       	cpc	r29, r1
 c52:	24 f4       	brge	.+8      	; 0xc5c <strtol+0xca>
 c54:	c2 30       	cpi	r28, 0x02	; 2
 c56:	d1 05       	cpc	r29, r1
 c58:	31 f5       	brne	.+76     	; 0xca6 <strtol+0x114>
 c5a:	0c c0       	rjmp	.+24     	; 0xc74 <strtol+0xe2>
 c5c:	ca 30       	cpi	r28, 0x0A	; 10
 c5e:	d1 05       	cpc	r29, r1
 c60:	89 f0       	breq	.+34     	; 0xc84 <strtol+0xf2>
 c62:	c0 31       	cpi	r28, 0x10	; 16
 c64:	d1 05       	cpc	r29, r1
 c66:	f9 f4       	brne	.+62     	; 0xca6 <strtol+0x114>
 c68:	c1 2c       	mov	r12, r1
 c6a:	d1 2c       	mov	r13, r1
 c6c:	e1 2c       	mov	r14, r1
 c6e:	b8 e0       	ldi	r27, 0x08	; 8
 c70:	fb 2e       	mov	r15, r27
 c72:	28 c0       	rjmp	.+80     	; 0xcc4 <strtol+0x132>
 c74:	c1 2c       	mov	r12, r1
 c76:	d1 2c       	mov	r13, r1
 c78:	e1 2c       	mov	r14, r1
 c7a:	a0 e4       	ldi	r26, 0x40	; 64
 c7c:	fa 2e       	mov	r15, r26
 c7e:	22 c0       	rjmp	.+68     	; 0xcc4 <strtol+0x132>
 c80:	ca e0       	ldi	r28, 0x0A	; 10
 c82:	d0 e0       	ldi	r29, 0x00	; 0
 c84:	fc ec       	ldi	r31, 0xCC	; 204
 c86:	cf 2e       	mov	r12, r31
 c88:	fc ec       	ldi	r31, 0xCC	; 204
 c8a:	df 2e       	mov	r13, r31
 c8c:	fc ec       	ldi	r31, 0xCC	; 204
 c8e:	ef 2e       	mov	r14, r31
 c90:	fc e0       	ldi	r31, 0x0C	; 12
 c92:	ff 2e       	mov	r15, r31
 c94:	17 c0       	rjmp	.+46     	; 0xcc4 <strtol+0x132>
 c96:	c8 e0       	ldi	r28, 0x08	; 8
 c98:	d0 e0       	ldi	r29, 0x00	; 0
 c9a:	c1 2c       	mov	r12, r1
 c9c:	d1 2c       	mov	r13, r1
 c9e:	e1 2c       	mov	r14, r1
 ca0:	e0 e1       	ldi	r30, 0x10	; 16
 ca2:	fe 2e       	mov	r15, r30
 ca4:	0f c0       	rjmp	.+30     	; 0xcc4 <strtol+0x132>
 ca6:	9e 01       	movw	r18, r28
 ca8:	44 27       	eor	r20, r20
 caa:	37 fd       	sbrc	r19, 7
 cac:	40 95       	com	r20
 cae:	54 2f       	mov	r21, r20
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	70 e0       	ldi	r23, 0x00	; 0
 cb4:	80 e0       	ldi	r24, 0x00	; 0
 cb6:	90 e8       	ldi	r25, 0x80	; 128
 cb8:	0e 94 8c 05 	call	0xb18	; 0xb18 <__udivmodsi4>
 cbc:	c9 01       	movw	r24, r18
 cbe:	da 01       	movw	r26, r20
 cc0:	6c 01       	movw	r12, r24
 cc2:	7d 01       	movw	r14, r26
 cc4:	20 e0       	ldi	r18, 0x00	; 0
 cc6:	30 e0       	ldi	r19, 0x00	; 0
 cc8:	40 e0       	ldi	r20, 0x00	; 0
 cca:	50 e0       	ldi	r21, 0x00	; 0
 ccc:	60 e0       	ldi	r22, 0x00	; 0
 cce:	3e 01       	movw	r6, r28
 cd0:	88 24       	eor	r8, r8
 cd2:	77 fc       	sbrc	r7, 7
 cd4:	80 94       	com	r8
 cd6:	98 2c       	mov	r9, r8
 cd8:	70 ed       	ldi	r23, 0xD0	; 208
 cda:	b7 2e       	mov	r11, r23
 cdc:	ba 0c       	add	r11, r10
 cde:	e9 e0       	ldi	r30, 0x09	; 9
 ce0:	eb 15       	cp	r30, r11
 ce2:	70 f4       	brcc	.+28     	; 0xd00 <strtol+0x16e>
 ce4:	8a 2d       	mov	r24, r10
 ce6:	81 54       	subi	r24, 0x41	; 65
 ce8:	8a 31       	cpi	r24, 0x1A	; 26
 cea:	18 f4       	brcc	.+6      	; 0xcf2 <strtol+0x160>
 cec:	99 ec       	ldi	r25, 0xC9	; 201
 cee:	b9 2e       	mov	r11, r25
 cf0:	06 c0       	rjmp	.+12     	; 0xcfe <strtol+0x16c>
 cf2:	8a 2d       	mov	r24, r10
 cf4:	81 56       	subi	r24, 0x61	; 97
 cf6:	8a 31       	cpi	r24, 0x1A	; 26
 cf8:	50 f5       	brcc	.+84     	; 0xd4e <strtol+0x1bc>
 cfa:	89 ea       	ldi	r24, 0xA9	; 169
 cfc:	b8 2e       	mov	r11, r24
 cfe:	ba 0c       	add	r11, r10
 d00:	8b 2d       	mov	r24, r11
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	8c 17       	cp	r24, r28
 d06:	9d 07       	cpc	r25, r29
 d08:	14 f5       	brge	.+68     	; 0xd4e <strtol+0x1bc>
 d0a:	6f 3f       	cpi	r22, 0xFF	; 255
 d0c:	e1 f0       	breq	.+56     	; 0xd46 <strtol+0x1b4>
 d0e:	c2 16       	cp	r12, r18
 d10:	d3 06       	cpc	r13, r19
 d12:	e4 06       	cpc	r14, r20
 d14:	f5 06       	cpc	r15, r21
 d16:	b0 f0       	brcs	.+44     	; 0xd44 <strtol+0x1b2>
 d18:	ca 01       	movw	r24, r20
 d1a:	b9 01       	movw	r22, r18
 d1c:	a4 01       	movw	r20, r8
 d1e:	93 01       	movw	r18, r6
 d20:	0e 94 6d 05 	call	0xada	; 0xada <__mulsi3>
 d24:	9b 01       	movw	r18, r22
 d26:	ac 01       	movw	r20, r24
 d28:	2b 0d       	add	r18, r11
 d2a:	31 1d       	adc	r19, r1
 d2c:	41 1d       	adc	r20, r1
 d2e:	51 1d       	adc	r21, r1
 d30:	21 30       	cpi	r18, 0x01	; 1
 d32:	f0 e0       	ldi	r31, 0x00	; 0
 d34:	3f 07       	cpc	r19, r31
 d36:	f0 e0       	ldi	r31, 0x00	; 0
 d38:	4f 07       	cpc	r20, r31
 d3a:	f0 e8       	ldi	r31, 0x80	; 128
 d3c:	5f 07       	cpc	r21, r31
 d3e:	10 f4       	brcc	.+4      	; 0xd44 <strtol+0x1b2>
 d40:	61 e0       	ldi	r22, 0x01	; 1
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <strtol+0x1b4>
 d44:	6f ef       	ldi	r22, 0xFF	; 255
 d46:	f8 01       	movw	r30, r16
 d48:	a1 90       	ld	r10, Z+
 d4a:	8f 01       	movw	r16, r30
 d4c:	c5 cf       	rjmp	.-118    	; 0xcd8 <strtol+0x146>
 d4e:	21 14       	cp	r2, r1
 d50:	31 04       	cpc	r3, r1
 d52:	81 f0       	breq	.+32     	; 0xd74 <strtol+0x1e2>
 d54:	66 23       	and	r22, r22
 d56:	31 f0       	breq	.+12     	; 0xd64 <strtol+0x1d2>
 d58:	01 50       	subi	r16, 0x01	; 1
 d5a:	10 40       	sbci	r17, 0x00	; 0
 d5c:	f1 01       	movw	r30, r2
 d5e:	11 83       	std	Z+1, r17	; 0x01
 d60:	00 83       	st	Z, r16
 d62:	08 c0       	rjmp	.+16     	; 0xd74 <strtol+0x1e2>
 d64:	51 fe       	sbrs	r5, 1
 d66:	1a c0       	rjmp	.+52     	; 0xd9c <strtol+0x20a>
 d68:	02 50       	subi	r16, 0x02	; 2
 d6a:	10 40       	sbci	r17, 0x00	; 0
 d6c:	f1 01       	movw	r30, r2
 d6e:	11 83       	std	Z+1, r17	; 0x01
 d70:	00 83       	st	Z, r16
 d72:	14 c0       	rjmp	.+40     	; 0xd9c <strtol+0x20a>
 d74:	67 ff       	sbrs	r22, 7
 d76:	12 c0       	rjmp	.+36     	; 0xd9c <strtol+0x20a>
 d78:	50 fc       	sbrc	r5, 0
 d7a:	05 c0       	rjmp	.+10     	; 0xd86 <strtol+0x1f4>
 d7c:	2f ef       	ldi	r18, 0xFF	; 255
 d7e:	3f ef       	ldi	r19, 0xFF	; 255
 d80:	4f ef       	ldi	r20, 0xFF	; 255
 d82:	5f e7       	ldi	r21, 0x7F	; 127
 d84:	04 c0       	rjmp	.+8      	; 0xd8e <strtol+0x1fc>
 d86:	20 e0       	ldi	r18, 0x00	; 0
 d88:	30 e0       	ldi	r19, 0x00	; 0
 d8a:	40 e0       	ldi	r20, 0x00	; 0
 d8c:	50 e8       	ldi	r21, 0x80	; 128
 d8e:	82 e2       	ldi	r24, 0x22	; 34
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	90 93 ac 01 	sts	0x01AC, r25
 d96:	80 93 ab 01 	sts	0x01AB, r24
 d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <strtol+0x236>
 d9c:	50 fe       	sbrs	r5, 0
 d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <strtol+0x21e>
 da0:	50 95       	com	r21
 da2:	40 95       	com	r20
 da4:	30 95       	com	r19
 da6:	21 95       	neg	r18
 da8:	3f 4f       	sbci	r19, 0xFF	; 255
 daa:	4f 4f       	sbci	r20, 0xFF	; 255
 dac:	5f 4f       	sbci	r21, 0xFF	; 255
 dae:	0c c0       	rjmp	.+24     	; 0xdc8 <strtol+0x236>
 db0:	57 ff       	sbrs	r21, 7
 db2:	0a c0       	rjmp	.+20     	; 0xdc8 <strtol+0x236>
 db4:	82 e2       	ldi	r24, 0x22	; 34
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	90 93 ac 01 	sts	0x01AC, r25
 dbc:	80 93 ab 01 	sts	0x01AB, r24
 dc0:	2f ef       	ldi	r18, 0xFF	; 255
 dc2:	3f ef       	ldi	r19, 0xFF	; 255
 dc4:	4f ef       	ldi	r20, 0xFF	; 255
 dc6:	5f e7       	ldi	r21, 0x7F	; 127
 dc8:	b9 01       	movw	r22, r18
 dca:	ca 01       	movw	r24, r20
 dcc:	df 91       	pop	r29
 dce:	cf 91       	pop	r28
 dd0:	1f 91       	pop	r17
 dd2:	0f 91       	pop	r16
 dd4:	ff 90       	pop	r15
 dd6:	ef 90       	pop	r14
 dd8:	df 90       	pop	r13
 dda:	cf 90       	pop	r12
 ddc:	bf 90       	pop	r11
 dde:	af 90       	pop	r10
 de0:	9f 90       	pop	r9
 de2:	8f 90       	pop	r8
 de4:	7f 90       	pop	r7
 de6:	6f 90       	pop	r6
 de8:	5f 90       	pop	r5
 dea:	3f 90       	pop	r3
 dec:	2f 90       	pop	r2
 dee:	08 95       	ret

00000df0 <atoi>:
 df0:	fc 01       	movw	r30, r24
 df2:	88 27       	eor	r24, r24
 df4:	99 27       	eor	r25, r25
 df6:	e8 94       	clt
 df8:	21 91       	ld	r18, Z+
 dfa:	20 32       	cpi	r18, 0x20	; 32
 dfc:	e9 f3       	breq	.-6      	; 0xdf8 <atoi+0x8>
 dfe:	29 30       	cpi	r18, 0x09	; 9
 e00:	10 f0       	brcs	.+4      	; 0xe06 <atoi+0x16>
 e02:	2e 30       	cpi	r18, 0x0E	; 14
 e04:	c8 f3       	brcs	.-14     	; 0xdf8 <atoi+0x8>
 e06:	2b 32       	cpi	r18, 0x2B	; 43
 e08:	41 f0       	breq	.+16     	; 0xe1a <atoi+0x2a>
 e0a:	2d 32       	cpi	r18, 0x2D	; 45
 e0c:	39 f4       	brne	.+14     	; 0xe1c <atoi+0x2c>
 e0e:	68 94       	set
 e10:	04 c0       	rjmp	.+8      	; 0xe1a <atoi+0x2a>
 e12:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulhi_const_10>
 e16:	82 0f       	add	r24, r18
 e18:	91 1d       	adc	r25, r1
 e1a:	21 91       	ld	r18, Z+
 e1c:	20 53       	subi	r18, 0x30	; 48
 e1e:	2a 30       	cpi	r18, 0x0A	; 10
 e20:	c0 f3       	brcs	.-16     	; 0xe12 <atoi+0x22>
 e22:	1e f4       	brtc	.+6      	; 0xe2a <atoi+0x3a>
 e24:	90 95       	com	r25
 e26:	81 95       	neg	r24
 e28:	9f 4f       	sbci	r25, 0xFF	; 255
 e2a:	08 95       	ret

00000e2c <isspace>:
 e2c:	91 11       	cpse	r25, r1
 e2e:	af c0       	rjmp	.+350    	; 0xf8e <__ctype_isfalse>
 e30:	80 32       	cpi	r24, 0x20	; 32
 e32:	19 f0       	breq	.+6      	; 0xe3a <isspace+0xe>
 e34:	89 50       	subi	r24, 0x09	; 9
 e36:	85 50       	subi	r24, 0x05	; 5
 e38:	d0 f7       	brcc	.-12     	; 0xe2e <isspace+0x2>
 e3a:	08 95       	ret

00000e3c <strchr>:
 e3c:	fc 01       	movw	r30, r24
 e3e:	81 91       	ld	r24, Z+
 e40:	86 17       	cp	r24, r22
 e42:	21 f0       	breq	.+8      	; 0xe4c <strchr+0x10>
 e44:	88 23       	and	r24, r24
 e46:	d9 f7       	brne	.-10     	; 0xe3e <strchr+0x2>
 e48:	99 27       	eor	r25, r25
 e4a:	08 95       	ret
 e4c:	31 97       	sbiw	r30, 0x01	; 1
 e4e:	cf 01       	movw	r24, r30
 e50:	08 95       	ret

00000e52 <strncasecmp>:
 e52:	fb 01       	movw	r30, r22
 e54:	dc 01       	movw	r26, r24
 e56:	41 50       	subi	r20, 0x01	; 1
 e58:	50 40       	sbci	r21, 0x00	; 0
 e5a:	88 f0       	brcs	.+34     	; 0xe7e <strncasecmp+0x2c>
 e5c:	8d 91       	ld	r24, X+
 e5e:	81 34       	cpi	r24, 0x41	; 65
 e60:	1c f0       	brlt	.+6      	; 0xe68 <strncasecmp+0x16>
 e62:	8b 35       	cpi	r24, 0x5B	; 91
 e64:	0c f4       	brge	.+2      	; 0xe68 <strncasecmp+0x16>
 e66:	80 5e       	subi	r24, 0xE0	; 224
 e68:	61 91       	ld	r22, Z+
 e6a:	61 34       	cpi	r22, 0x41	; 65
 e6c:	1c f0       	brlt	.+6      	; 0xe74 <strncasecmp+0x22>
 e6e:	6b 35       	cpi	r22, 0x5B	; 91
 e70:	0c f4       	brge	.+2      	; 0xe74 <strncasecmp+0x22>
 e72:	60 5e       	subi	r22, 0xE0	; 224
 e74:	86 1b       	sub	r24, r22
 e76:	61 11       	cpse	r22, r1
 e78:	71 f3       	breq	.-36     	; 0xe56 <strncasecmp+0x4>
 e7a:	99 0b       	sbc	r25, r25
 e7c:	08 95       	ret
 e7e:	88 1b       	sub	r24, r24
 e80:	fc cf       	rjmp	.-8      	; 0xe7a <strncasecmp+0x28>

00000e82 <strncpy>:
 e82:	fb 01       	movw	r30, r22
 e84:	dc 01       	movw	r26, r24
 e86:	41 50       	subi	r20, 0x01	; 1
 e88:	50 40       	sbci	r21, 0x00	; 0
 e8a:	48 f0       	brcs	.+18     	; 0xe9e <strncpy+0x1c>
 e8c:	01 90       	ld	r0, Z+
 e8e:	0d 92       	st	X+, r0
 e90:	00 20       	and	r0, r0
 e92:	c9 f7       	brne	.-14     	; 0xe86 <strncpy+0x4>
 e94:	01 c0       	rjmp	.+2      	; 0xe98 <strncpy+0x16>
 e96:	1d 92       	st	X+, r1
 e98:	41 50       	subi	r20, 0x01	; 1
 e9a:	50 40       	sbci	r21, 0x00	; 0
 e9c:	e0 f7       	brcc	.-8      	; 0xe96 <strncpy+0x14>
 e9e:	08 95       	ret

00000ea0 <strstr>:
 ea0:	fb 01       	movw	r30, r22
 ea2:	51 91       	ld	r21, Z+
 ea4:	55 23       	and	r21, r21
 ea6:	a9 f0       	breq	.+42     	; 0xed2 <strstr+0x32>
 ea8:	bf 01       	movw	r22, r30
 eaa:	dc 01       	movw	r26, r24
 eac:	4d 91       	ld	r20, X+
 eae:	45 17       	cp	r20, r21
 eb0:	41 11       	cpse	r20, r1
 eb2:	e1 f7       	brne	.-8      	; 0xeac <strstr+0xc>
 eb4:	59 f4       	brne	.+22     	; 0xecc <strstr+0x2c>
 eb6:	cd 01       	movw	r24, r26
 eb8:	01 90       	ld	r0, Z+
 eba:	00 20       	and	r0, r0
 ebc:	49 f0       	breq	.+18     	; 0xed0 <strstr+0x30>
 ebe:	4d 91       	ld	r20, X+
 ec0:	40 15       	cp	r20, r0
 ec2:	41 11       	cpse	r20, r1
 ec4:	c9 f3       	breq	.-14     	; 0xeb8 <strstr+0x18>
 ec6:	fb 01       	movw	r30, r22
 ec8:	41 11       	cpse	r20, r1
 eca:	ef cf       	rjmp	.-34     	; 0xeaa <strstr+0xa>
 ecc:	81 e0       	ldi	r24, 0x01	; 1
 ece:	90 e0       	ldi	r25, 0x00	; 0
 ed0:	01 97       	sbiw	r24, 0x01	; 1
 ed2:	08 95       	ret

00000ed4 <itoa>:
 ed4:	fb 01       	movw	r30, r22
 ed6:	9f 01       	movw	r18, r30
 ed8:	e8 94       	clt
 eda:	42 30       	cpi	r20, 0x02	; 2
 edc:	c4 f0       	brlt	.+48     	; 0xf0e <itoa+0x3a>
 ede:	45 32       	cpi	r20, 0x25	; 37
 ee0:	b4 f4       	brge	.+44     	; 0xf0e <itoa+0x3a>
 ee2:	4a 30       	cpi	r20, 0x0A	; 10
 ee4:	29 f4       	brne	.+10     	; 0xef0 <itoa+0x1c>
 ee6:	97 fb       	bst	r25, 7
 ee8:	1e f4       	brtc	.+6      	; 0xef0 <itoa+0x1c>
 eea:	90 95       	com	r25
 eec:	81 95       	neg	r24
 eee:	9f 4f       	sbci	r25, 0xFF	; 255
 ef0:	64 2f       	mov	r22, r20
 ef2:	77 27       	eor	r23, r23
 ef4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__udivmodhi4>
 ef8:	80 5d       	subi	r24, 0xD0	; 208
 efa:	8a 33       	cpi	r24, 0x3A	; 58
 efc:	0c f0       	brlt	.+2      	; 0xf00 <itoa+0x2c>
 efe:	89 5d       	subi	r24, 0xD9	; 217
 f00:	81 93       	st	Z+, r24
 f02:	cb 01       	movw	r24, r22
 f04:	00 97       	sbiw	r24, 0x00	; 0
 f06:	a1 f7       	brne	.-24     	; 0xef0 <itoa+0x1c>
 f08:	16 f4       	brtc	.+4      	; 0xf0e <itoa+0x3a>
 f0a:	5d e2       	ldi	r21, 0x2D	; 45
 f0c:	51 93       	st	Z+, r21
 f0e:	10 82       	st	Z, r1
 f10:	c9 01       	movw	r24, r18
 f12:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <strrev>

00000f16 <ltoa>:
 f16:	fa 01       	movw	r30, r20
 f18:	cf 93       	push	r28
 f1a:	ff 93       	push	r31
 f1c:	ef 93       	push	r30
 f1e:	22 30       	cpi	r18, 0x02	; 2
 f20:	44 f1       	brlt	.+80     	; 0xf72 <ltoa+0x5c>
 f22:	25 32       	cpi	r18, 0x25	; 37
 f24:	34 f5       	brge	.+76     	; 0xf72 <ltoa+0x5c>
 f26:	c2 2f       	mov	r28, r18
 f28:	e8 94       	clt
 f2a:	ca 30       	cpi	r28, 0x0A	; 10
 f2c:	49 f4       	brne	.+18     	; 0xf40 <ltoa+0x2a>
 f2e:	97 fb       	bst	r25, 7
 f30:	3e f4       	brtc	.+14     	; 0xf40 <ltoa+0x2a>
 f32:	90 95       	com	r25
 f34:	80 95       	com	r24
 f36:	70 95       	com	r23
 f38:	61 95       	neg	r22
 f3a:	7f 4f       	sbci	r23, 0xFF	; 255
 f3c:	8f 4f       	sbci	r24, 0xFF	; 255
 f3e:	9f 4f       	sbci	r25, 0xFF	; 255
 f40:	2c 2f       	mov	r18, r28
 f42:	33 27       	eor	r19, r19
 f44:	44 27       	eor	r20, r20
 f46:	55 27       	eor	r21, r21
 f48:	ff 93       	push	r31
 f4a:	ef 93       	push	r30
 f4c:	0e 94 8c 05 	call	0xb18	; 0xb18 <__udivmodsi4>
 f50:	ef 91       	pop	r30
 f52:	ff 91       	pop	r31
 f54:	60 5d       	subi	r22, 0xD0	; 208
 f56:	6a 33       	cpi	r22, 0x3A	; 58
 f58:	0c f0       	brlt	.+2      	; 0xf5c <ltoa+0x46>
 f5a:	69 5d       	subi	r22, 0xD9	; 217
 f5c:	61 93       	st	Z+, r22
 f5e:	b9 01       	movw	r22, r18
 f60:	ca 01       	movw	r24, r20
 f62:	60 50       	subi	r22, 0x00	; 0
 f64:	70 40       	sbci	r23, 0x00	; 0
 f66:	80 40       	sbci	r24, 0x00	; 0
 f68:	90 40       	sbci	r25, 0x00	; 0
 f6a:	51 f7       	brne	.-44     	; 0xf40 <ltoa+0x2a>
 f6c:	16 f4       	brtc	.+4      	; 0xf72 <ltoa+0x5c>
 f6e:	cd e2       	ldi	r28, 0x2D	; 45
 f70:	c1 93       	st	Z+, r28
 f72:	10 82       	st	Z, r1
 f74:	8f 91       	pop	r24
 f76:	9f 91       	pop	r25
 f78:	cf 91       	pop	r28
 f7a:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <strrev>

00000f7e <__mulhi_const_10>:
 f7e:	7a e0       	ldi	r23, 0x0A	; 10
 f80:	97 9f       	mul	r25, r23
 f82:	90 2d       	mov	r25, r0
 f84:	87 9f       	mul	r24, r23
 f86:	80 2d       	mov	r24, r0
 f88:	91 0d       	add	r25, r1
 f8a:	11 24       	eor	r1, r1
 f8c:	08 95       	ret

00000f8e <__ctype_isfalse>:
 f8e:	99 27       	eor	r25, r25
 f90:	88 27       	eor	r24, r24

00000f92 <__ctype_istrue>:
 f92:	08 95       	ret

00000f94 <strrev>:
 f94:	dc 01       	movw	r26, r24
 f96:	fc 01       	movw	r30, r24
 f98:	67 2f       	mov	r22, r23
 f9a:	71 91       	ld	r23, Z+
 f9c:	77 23       	and	r23, r23
 f9e:	e1 f7       	brne	.-8      	; 0xf98 <strrev+0x4>
 fa0:	32 97       	sbiw	r30, 0x02	; 2
 fa2:	04 c0       	rjmp	.+8      	; 0xfac <strrev+0x18>
 fa4:	7c 91       	ld	r23, X
 fa6:	6d 93       	st	X+, r22
 fa8:	70 83       	st	Z, r23
 faa:	62 91       	ld	r22, -Z
 fac:	ae 17       	cp	r26, r30
 fae:	bf 07       	cpc	r27, r31
 fb0:	c8 f3       	brcs	.-14     	; 0xfa4 <strrev+0x10>
 fb2:	08 95       	ret

00000fb4 <__udivmodhi4>:
 fb4:	aa 1b       	sub	r26, r26
 fb6:	bb 1b       	sub	r27, r27
 fb8:	51 e1       	ldi	r21, 0x11	; 17
 fba:	07 c0       	rjmp	.+14     	; 0xfca <__udivmodhi4_ep>

00000fbc <__udivmodhi4_loop>:
 fbc:	aa 1f       	adc	r26, r26
 fbe:	bb 1f       	adc	r27, r27
 fc0:	a6 17       	cp	r26, r22
 fc2:	b7 07       	cpc	r27, r23
 fc4:	10 f0       	brcs	.+4      	; 0xfca <__udivmodhi4_ep>
 fc6:	a6 1b       	sub	r26, r22
 fc8:	b7 0b       	sbc	r27, r23

00000fca <__udivmodhi4_ep>:
 fca:	88 1f       	adc	r24, r24
 fcc:	99 1f       	adc	r25, r25
 fce:	5a 95       	dec	r21
 fd0:	a9 f7       	brne	.-22     	; 0xfbc <__udivmodhi4_loop>
 fd2:	80 95       	com	r24
 fd4:	90 95       	com	r25
 fd6:	bc 01       	movw	r22, r24
 fd8:	cd 01       	movw	r24, r26
 fda:	08 95       	ret

00000fdc <_exit>:
 fdc:	f8 94       	cli

00000fde <__stop_program>:
 fde:	ff cf       	rjmp	.-2      	; 0xfde <__stop_program>
